{
  "if falsy return null": {
    "prefix": "ifr",
    "body": "if (!${1:condition}) {\n\treturn null\n}"
  },
  "jsx element": {
    "prefix": "j",
    "body": "<${1:elementName}>\n\t$0\n</${1}>",
    "description": "an element"
  },
  "jsx element self closed": {
    "prefix": "jc",
    "body": "<${1:elementName} />",
    "description": "an element self closed"
  },
  "jsx elements map": {
    "prefix": "jm",
    "body": "{${1:array}.map((item, index) => <${2:elementName} key={index}>\n\t$0\n</${2}>)}",
    "description": "an element self closed"
  },
  "jsx elements map with return": {
    "prefix": "jmr",
    "body": "{${1:array}.map((item, index) => {\n\treturn <${2:elementName} key={index}>\n\t$0\n  </${2}>\n})}",
    "description": "an element self closed"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = useState(${2:default${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}});",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, [])$0"
    ],
    "description": "React useEffect() hook"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext($2)$0"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:ref} = useRef(null)$0"],
    "description": "React useRef() hook"
  },
  "useCallback": {
    "prefix": "uc",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {${2}},",
      "\t[],",
      ")$0"
    ],
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "um",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => (${2}), [])$0"
    ],
    "description": "React useMemo() hook"
  }
}
